"""
Componentes da interface principal

NOTA: Layout, estrutura visual e configura√ß√µes dos componentes
desenvolvidos com assist√™ncia de IA para acelerar a prototipagem.
"""

import streamlit as st
import pandas as pd


def render_header():
    """Renderiza o cabe√ßalho do dashboard"""
    st.markdown(
        """
    <div class="main-header">
        <h1>üß† Monitor de Percep√ß√£o P√∫blica sobre IA no Piau√≠</h1>
        <p>An√°lise de sentimento em not√≠cias sobre Intelig√™ncia Artificial</p>
    </div>
    """,
        unsafe_allow_html=True,
    )


def render_metrics(df_filtered):
    """Renderiza as m√©tricas principais"""
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üì∞ Total de Not√≠cias", len(df_filtered))

    with col2:
        positivas = len(df_filtered[df_filtered["sentimento"] == "positivo"])
        st.metric("üòä Not√≠cias Positivas", positivas)

    with col3:
        negativas = len(df_filtered[df_filtered["sentimento"] == "negativo"])
        st.metric("üòü Not√≠cias Negativas", negativas)

    with col4:
        neutras = len(df_filtered[df_filtered["sentimento"] == "neutro"])
        st.metric("üòê Not√≠cias Neutras", neutras)


def render_main_visualizations(df_filtered, charts):
    """Renderiza as visualiza√ß√µes principais"""
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("üìä Distribui√ß√£o de Sentimentos")
        pie_chart = charts.create_sentiment_pie_chart(df_filtered)
        if pie_chart:
            st.plotly_chart(pie_chart, use_container_width=True)

    with col2:
        st.subheader("üìä Palavras Mais Frequentes")
        wordcloud_fig = charts.create_wordcloud(df_filtered)
        if wordcloud_fig:
            st.pyplot(wordcloud_fig)
        else:
            st.info("N√£o h√° dados suficientes para gerar a an√°lise de palavras")


def render_timeline_chart(df_filtered, charts):
    """Renderiza o gr√°fico temporal"""
    if len(df_filtered) > 1:
        st.subheader("üìà Evolu√ß√£o Temporal")
        timeline_chart = charts.create_timeline_chart(df_filtered)
        if timeline_chart:
            st.plotly_chart(timeline_chart, use_container_width=True)


def render_secondary_charts(df_filtered, charts):
    """Renderiza gr√°ficos secund√°rios"""
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("üìä Distribui√ß√£o por Termo")
        term_chart = charts.create_term_distribution_chart(df_filtered)
        if term_chart:
            st.plotly_chart(term_chart, use_container_width=True)

    with col2:
        st.subheader("üìà Distribui√ß√£o de Confian√ßa")
        confidence_chart = charts.create_confidence_histogram(df_filtered)
        if confidence_chart:
            st.plotly_chart(confidence_chart, use_container_width=True)


def render_data_table(df_filtered, show_confidence):
    """Renderiza a tabela de dados"""
    st.subheader("üìã Dados Coletados")

    if show_confidence:
        st.info(
            "üí° **Dica:** A coluna 'Confian√ßa' mostra o qu√£o certeza o sistema tem da classifica√ß√£o (0% = incerto, 100% = muito certeza)"
        )

    # Preparar dados para exibi√ß√£o
    display_df = df_filtered.copy()
    display_df["data_publicacao"] = pd.to_datetime(
        display_df["data_publicacao"]
    ).dt.strftime("%d/%m/%Y %H:%M")

    # Truncar t√≠tulos muito longos para melhor visualiza√ß√£o
    display_df["titulo_truncado"] = display_df["titulo"].apply(
        lambda x: x[:80] + "..." if len(x) > 80 else x
    )

    columns_to_show = [
        "titulo_truncado",
        "link",
        "sentimento",
        "termo_busca",
        "data_publicacao",
    ]
    if show_confidence:
        columns_to_show.insert(3, "confianca")

    # Renomear colunas para exibi√ß√£o
    display_columns = {
        "titulo_truncado": "T√≠tulo",
        "link": "üîó Link",
        "sentimento": "Sentimento",
        "confianca": "Confian√ßa",
        "termo_busca": "Termo",
        "data_publicacao": "Data",
    }

    table_df = display_df[columns_to_show].rename(columns=display_columns)

    # Configura√ß√£o das colunas
    column_config = {
        "üîó Link": st.column_config.LinkColumn(
            "üîó Link", help="Clique para acessar a not√≠cia completa", width="small"
        ),
        "T√≠tulo": st.column_config.TextColumn(
            "T√≠tulo", width="large", help="T√≠tulo da not√≠cia"
        ),
        "Sentimento": st.column_config.TextColumn("Sentimento", width="small"),
        "Termo": st.column_config.TextColumn("Termo", width="small"),
        "Data": st.column_config.TextColumn("Data", width="medium"),
    }

    if show_confidence:
        column_config["Confian√ßa"] = st.column_config.NumberColumn(
            "Confian√ßa",
            help="N√≠vel de confian√ßa da an√°lise de sentimento",
            min_value=0,
            max_value=1,
            format="%.2f",
            width="small",
        )

    # Exibir tabela com hyperlinks clic√°veis
    st.dataframe(
        table_df,
        use_container_width=True,
        hide_index=True,
        column_config=column_config,
        height=400,
    )

    # Estat√≠sticas resumidas da tabela
    st.caption(
        f"üìä Exibindo {len(table_df)} not√≠cias de um total de {len(df_filtered)} ap√≥s aplicar filtros."
    )


def render_detailed_statistics(df_filtered):
    """Renderiza estat√≠sticas detalhadas"""
    with st.expander("üìä Estat√≠sticas Detalhadas"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**Distribui√ß√£o por Termo de Busca:**")
            term_counts = df_filtered["termo_busca"].value_counts()
            st.bar_chart(term_counts)

        with col2:
            st.write("**Confian√ßa M√©dia por Sentimento:**")
            confidence_stats = (
                df_filtered.groupby("sentimento")["confianca"]
                .agg(["mean", "count"])
                .round(3)
            )
            confidence_stats.columns = ["Confian√ßa M√©dia", "Quantidade de Not√≠cias"]
            confidence_stats.index.name = "Sentimento"
            st.dataframe(confidence_stats)

            st.info(
                """
            **üí° Confian√ßa M√©dia** indica o qu√£o certeza o sistema tem:
            
            ‚Ä¢ **0.0-0.3**: Baixa confian√ßa
            ‚Ä¢ **0.3-0.6**: Confian√ßa moderada  
            ‚Ä¢ **0.6-1.0**: Alta confian√ßa
            
            **Como funciona:** Conta palavras de sentimento e divide pelo total de palavras.
            """
            )


def render_limitations_info():
    """Renderiza informa√ß√µes sobre limita√ß√µes"""
    st.warning("‚ö†Ô∏è **Sobre a An√°lise de Sentimento**")

    with st.expander("üìñ Como funciona e limita√ß√µes da an√°lise"):
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(
                """
            **üîß Como funciona:**
            
            ‚Ä¢ Lista de palavras positivas e negativas
            ‚Ä¢ "excelente", "inova√ß√£o" ‚Üí positivo
            ‚Ä¢ "problema", "risco" ‚Üí negativo  
            ‚Ä¢ Sem palavras claras ‚Üí neutro
            
            **üìä C√°lculo da confian√ßa:**
            
            ‚Ä¢ Conta palavras de sentimento
            ‚Ä¢ Divide pelo total de palavras
            ‚Ä¢ Mais palavras = maior confian√ßa
            """
            )

        with col2:
            st.markdown(
                """
            **‚ö†Ô∏è Limita√ß√µes importantes:**
            
            ‚Ä¢ N√£o entende sarcasmo ou ironia
            ‚Ä¢ N√£o considera contexto completo
            ‚Ä¢ Pode errar em textos complexos
            ‚Ä¢ √â uma aproxima√ß√£o inicial
            
            **üí° Como usar:**
            
            ‚Ä¢ Primeiro indicativo da percep√ß√£o
            ‚Ä¢ Sempre complementar com an√°lise humana
            ‚Ä¢ √ötil para vis√£o geral dos dados
            """
            )


def render_footer():
    """Renderiza o rodap√©"""
    st.markdown(
        """
    <div class="footer">
        <p>üìÖ Desenvolvido para o teste t√©cnico da Secretaria de Intelig√™ncia Artificial do Piau√≠</p>
    </div>
    """,
        unsafe_allow_html=True,
    )
